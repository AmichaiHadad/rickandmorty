name: Kubernetes Deployment Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  k8s-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: true
          tags: rick-and-morty-api:latest
      
      - name: Create Kind Config
        run: |
          cat > kind-config.yaml << EOF
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            kubeadmConfigPatches:
            - |
              kind: InitConfiguration
              nodeRegistration:
                kubeletExtraArgs:
                  node-labels: "ingress-ready=true"
            extraPortMappings:
            - containerPort: 80
              hostPort: 80
              protocol: TCP
            - containerPort: 443
              hostPort: 443
              protocol: TCP
          - role: worker
          EOF
          
          cat kind-config.yaml
      
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.5.0
        with:
          cluster_name: kind
          config: ./kind-config.yaml

      - name: Verify cluster setup
        run: |
          kubectl cluster-info
          kubectl get nodes
          echo "Loading Docker image into Kind cluster..."
          kind load docker-image rick-and-morty-api:latest --name kind

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest requests
      
      - name: Install NGINX Ingress
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/kind/deploy.yaml
          
          echo "Waiting for ingress controller pods to be created..."
          sleep 20
          
          echo "Checking ingress controller pods..."
          kubectl get pods -n ingress-nginx
          
          echo "Waiting for ingress controller to be ready..."
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=180s || true
      
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.11.1'
      
      - name: Deploy Rick and Morty API using Helm
        run: |
          # Deploy using Helm
          helm install rick-and-morty-api ./helm/rick-and-morty
          
          # Wait for pods to be created
          sleep 10
          
          # Print deployment status
          echo "Checking deployments..."
          kubectl get deployments
          
          echo "Checking pods..."
          kubectl get pods
          
          # Wait for deployment to be ready
          echo "Waiting for deployment to be ready..."
          kubectl wait --for=condition=available --timeout=120s deployment/rick-and-morty-api || true
          
          # Add host entry to /etc/hosts
          echo "127.0.0.1 rickandmorty.local" | sudo tee -a /etc/hosts
          
          # Give ingress some time to be configured
          sleep 20
          
          # Check if ingress was created
          echo "Checking ingress resources..."
          kubectl get ingress
      
      - name: Create test script
        run: |
          cat << EOF > test_api.py
          import requests
          import time
          import pytest
          import socket
          import os

          # Try connecting to service directly instead of through ingress initially
          BASE_URL = "http://rickandmorty.local"
          DIRECT_PORT_FORWARD = False
          
          # If we need to use port forwarding
          if DIRECT_PORT_FORWARD:
              # Start port forwarding in background
              os.system("kubectl port-forward svc/rick-and-morty-api 8080:80 &")
              time.sleep(5)  # Give it time to start
              BASE_URL = "http://localhost:8080"
              
          MAX_RETRIES = 5
          RETRY_DELAY = 5  # seconds

          def test_health_endpoint():
              """Test the health endpoint returns OK status."""
              for attempt in range(MAX_RETRIES):
                  try:
                      print(f"Testing health endpoint at {BASE_URL}/healthcheck")
                      response = requests.get(f"{BASE_URL}/healthcheck", timeout=10)
                      response.raise_for_status()
                      data = response.json()
                      assert response.status_code == 200
                      assert data["status"] == "ok"
                      return
                  except (requests.RequestException, AssertionError) as e:
                      if attempt < MAX_RETRIES - 1:
                          print(f"Retry attempt {attempt + 1}/{MAX_RETRIES} after error: {str(e)}")
                          time.sleep(RETRY_DELAY)
                      else:
                          raise

          def test_root_endpoint():
              """Test the root endpoint provides API information."""
              response = requests.get(f"{BASE_URL}/")
              response.raise_for_status()
              data = response.json()
              assert response.status_code == 200
              assert "name" in data
              assert "endpoints" in data

          def test_characters_endpoint():
              """Test the characters endpoint returns character data."""
              response = requests.get(f"{BASE_URL}/characters")
              response.raise_for_status()
              data = response.json()
              assert response.status_code == 200
              assert "count" in data
              assert "characters" in data
              assert isinstance(data["characters"], list)
              if len(data["characters"]) > 0:
                  assert "name" in data["characters"][0]
                  assert "location" in data["characters"][0]
                  assert "image" in data["characters"][0]
          EOF
      
      - name: Check connectivity before tests
        run: |
          echo "Verifying cluster connectivity..."
          kubectl cluster-info
          
          echo "=== Pods ==="
          kubectl get pods -A
          
          echo "=== Services ==="
          kubectl get svc -A
          
          echo "=== Ingress ==="
          kubectl get ingress -A
          
          echo "Testing connection to application..."
          curl -v http://rickandmorty.local/healthcheck || true
          
          echo "Starting port forwarding as fallback..."
          kubectl port-forward svc/rick-and-morty-api 8080:80 &
          sleep 5
          curl -v http://localhost:8080/healthcheck || true
      
      - name: Run API tests
        run: |
          python -m pytest -v test_api.py
      
      - name: Display Kubernetes resources
        if: always()
        run: |
          echo "=== Pods ==="
          kubectl get pods -A
          echo ""
          echo "=== Services ==="
          kubectl get svc -A
          echo ""
          echo "=== Ingress ==="
          kubectl get ingress -A
          echo ""
          echo "=== Pod Logs ==="
          kubectl logs -l app=rick-and-morty-api --tail=100 || true 